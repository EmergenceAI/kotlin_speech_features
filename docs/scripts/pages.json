[{"name":"abstract fun rfft(signal: FloatArray, nfft: Int): Array<Complex>","description":"org.merlyn.kotlinspeechfeatures.fft.FFT.rfft","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-f-f-t/rfft.html","searchKeys":["rfft","abstract fun rfft(signal: FloatArray, nfft: Int): Array<Complex>","org.merlyn.kotlinspeechfeatures.fft.FFT.rfft"]},{"name":"class Complex(real: Double, imag: Double)","description":"org.merlyn.kotlinspeechfeatures.fft.Complex","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/index.html","searchKeys":["Complex","class Complex(real: Double, imag: Double)","org.merlyn.kotlinspeechfeatures.fft.Complex"]},{"name":"class KotlinFFT : FFT","description":"org.merlyn.kotlinspeechfeatures.fft.KotlinFFT","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-kotlin-f-f-t/index.html","searchKeys":["KotlinFFT","class KotlinFFT : FFT","org.merlyn.kotlinspeechfeatures.fft.KotlinFFT"]},{"name":"class MathUtils","description":"org.merlyn.kotlinspeechfeatures.MathUtils","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-math-utils/index.html","searchKeys":["MathUtils","class MathUtils","org.merlyn.kotlinspeechfeatures.MathUtils"]},{"name":"class NoiseFFT : FFT","description":"org.merlyn.kotlinspeechfeatures.fft.NoiseFFT","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-noise-f-f-t/index.html","searchKeys":["NoiseFFT","class NoiseFFT : FFT","org.merlyn.kotlinspeechfeatures.fft.NoiseFFT"]},{"name":"class SignalProc(fft: FFT = KotlinFFT())","description":"org.merlyn.kotlinspeechfeatures.SignalProc","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/index.html","searchKeys":["SignalProc","class SignalProc(fft: FFT = KotlinFFT())","org.merlyn.kotlinspeechfeatures.SignalProc"]},{"name":"class SpeechFeatures(fft: FFT = KotlinFFT())","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/index.html","searchKeys":["SpeechFeatures","class SpeechFeatures(fft: FFT = KotlinFFT())","org.merlyn.kotlinspeechfeatures.SpeechFeatures"]},{"name":"fun Complex(real: Double, imag: Double)","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.Complex","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/-complex.html","searchKeys":["Complex","fun Complex(real: Double, imag: Double)","org.merlyn.kotlinspeechfeatures.fft.Complex.Complex"]},{"name":"fun KotlinFFT()","description":"org.merlyn.kotlinspeechfeatures.fft.KotlinFFT.KotlinFFT","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-kotlin-f-f-t/-kotlin-f-f-t.html","searchKeys":["KotlinFFT","fun KotlinFFT()","org.merlyn.kotlinspeechfeatures.fft.KotlinFFT.KotlinFFT"]},{"name":"fun MathUtils()","description":"org.merlyn.kotlinspeechfeatures.MathUtils.MathUtils","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-math-utils/-math-utils.html","searchKeys":["MathUtils","fun MathUtils()","org.merlyn.kotlinspeechfeatures.MathUtils.MathUtils"]},{"name":"fun NoiseFFT()","description":"org.merlyn.kotlinspeechfeatures.fft.NoiseFFT.NoiseFFT","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-noise-f-f-t/-noise-f-f-t.html","searchKeys":["NoiseFFT","fun NoiseFFT()","org.merlyn.kotlinspeechfeatures.fft.NoiseFFT.NoiseFFT"]},{"name":"fun SignalProc(fft: FFT = KotlinFFT())","description":"org.merlyn.kotlinspeechfeatures.SignalProc.SignalProc","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/-signal-proc.html","searchKeys":["SignalProc","fun SignalProc(fft: FFT = KotlinFFT())","org.merlyn.kotlinspeechfeatures.SignalProc.SignalProc"]},{"name":"fun SpeechFeatures(fft: FFT = KotlinFFT())","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.SpeechFeatures","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/-speech-features.html","searchKeys":["SpeechFeatures","fun SpeechFeatures(fft: FFT = KotlinFFT())","org.merlyn.kotlinspeechfeatures.SpeechFeatures.SpeechFeatures"]},{"name":"fun abs(): Double","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.abs","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/abs.html","searchKeys":["abs","fun abs(): Double","org.merlyn.kotlinspeechfeatures.fft.Complex.abs"]},{"name":"fun conjugate(): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.conjugate","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/conjugate.html","searchKeys":["conjugate","fun conjugate(): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.conjugate"]},{"name":"fun cos(): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.cos","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/cos.html","searchKeys":["cos","fun cos(): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.cos"]},{"name":"fun deframesig(frames: Array<FloatArray>, sigLen: Int, frameLen: Int, frameStep: Int, winFunc: (Int) -> IntArray = { Array(it){ 1 }.toIntArray() }): FloatArray","description":"org.merlyn.kotlinspeechfeatures.SignalProc.deframesig","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/deframesig.html","searchKeys":["deframesig","fun deframesig(frames: Array<FloatArray>, sigLen: Int, frameLen: Int, frameStep: Int, winFunc: (Int) -> IntArray = { Array(it){ 1 }.toIntArray() }): FloatArray","org.merlyn.kotlinspeechfeatures.SignalProc.deframesig"]},{"name":"fun delta(feat: FloatArray, n: Int): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.delta","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/delta.html","searchKeys":["delta","fun delta(feat: FloatArray, n: Int): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SpeechFeatures.delta"]},{"name":"fun divides(b: Complex): Complex?","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.divides","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/divides.html","searchKeys":["divides","fun divides(b: Complex): Complex?","org.merlyn.kotlinspeechfeatures.fft.Complex.divides"]},{"name":"fun exp(): Complex?","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.exp","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/exp.html","searchKeys":["exp","fun exp(): Complex?","org.merlyn.kotlinspeechfeatures.fft.Complex.exp"]},{"name":"fun fbank(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, nFilt: Int = 26, nfft: Int = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, winFunc: FloatArray? = null): Pair<Array<FloatArray>, FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.fbank","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/fbank.html","searchKeys":["fbank","fun fbank(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, nFilt: Int = 26, nfft: Int = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, winFunc: FloatArray? = null): Pair<Array<FloatArray>, FloatArray>","org.merlyn.kotlinspeechfeatures.SpeechFeatures.fbank"]},{"name":"fun framesig(signal: FloatArray, frameLen: Int, frameStep: Int, winFunc: FloatArray? = null, strideTrick: Boolean = true): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SignalProc.framesig","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/framesig.html","searchKeys":["framesig","fun framesig(signal: FloatArray, frameLen: Int, frameStep: Int, winFunc: FloatArray? = null, strideTrick: Boolean = true): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SignalProc.framesig"]},{"name":"fun getFilterBanks(nFilt: Int = 20, nfft: Int = 512, sampleRate: Int = 16000, lowFreq: Int = 0, highFreqIn: Int? = null): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.getFilterBanks","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/get-filter-banks.html","searchKeys":["getFilterBanks","fun getFilterBanks(nFilt: Int = 20, nfft: Int = 512, sampleRate: Int = 16000, lowFreq: Int = 0, highFreqIn: Int? = null): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SpeechFeatures.getFilterBanks"]},{"name":"fun hz2mel(hz: Double): Double","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.hz2mel","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/hz2mel.html","searchKeys":["hz2mel","fun hz2mel(hz: Double): Double","org.merlyn.kotlinspeechfeatures.SpeechFeatures.hz2mel"]},{"name":"fun hz2mel(hz: DoubleArray): DoubleArray","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.hz2mel","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/hz2mel.html","searchKeys":["hz2mel","fun hz2mel(hz: DoubleArray): DoubleArray","org.merlyn.kotlinspeechfeatures.SpeechFeatures.hz2mel"]},{"name":"fun im(): Double","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.im","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/im.html","searchKeys":["im","fun im(): Double","org.merlyn.kotlinspeechfeatures.fft.Complex.im"]},{"name":"fun lifter(cepstra: FloatArray, l: Int = 22): FloatArray","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.lifter","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/lifter.html","searchKeys":["lifter","fun lifter(cepstra: FloatArray, l: Int = 22): FloatArray","org.merlyn.kotlinspeechfeatures.SpeechFeatures.lifter"]},{"name":"fun logfbank(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, nFilt: Int = 26, nfft: Int = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, winFunc: FloatArray? = null): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.logfbank","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/logfbank.html","searchKeys":["logfbank","fun logfbank(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, nFilt: Int = 26, nfft: Int = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, winFunc: FloatArray? = null): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SpeechFeatures.logfbank"]},{"name":"fun logpowspec(frames: Array<FloatArray>, nfft: Int, norm: Boolean = true): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SignalProc.logpowspec","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/logpowspec.html","searchKeys":["logpowspec","fun logpowspec(frames: Array<FloatArray>, nfft: Int, norm: Boolean = true): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SignalProc.logpowspec"]},{"name":"fun magspec(frames: Array<FloatArray>, nfft: Int): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SignalProc.magspec","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/magspec.html","searchKeys":["magspec","fun magspec(frames: Array<FloatArray>, nfft: Int): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SignalProc.magspec"]},{"name":"fun mel2hz(mel: Double): Double","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.mel2hz","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/mel2hz.html","searchKeys":["mel2hz","fun mel2hz(mel: Double): Double","org.merlyn.kotlinspeechfeatures.SpeechFeatures.mel2hz"]},{"name":"fun mel2hz(mel: DoubleArray): DoubleArray","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.mel2hz","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/mel2hz.html","searchKeys":["mel2hz","fun mel2hz(mel: DoubleArray): DoubleArray","org.merlyn.kotlinspeechfeatures.SpeechFeatures.mel2hz"]},{"name":"fun mfcc(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, numCep: Int = 13, nFilt: Int = 26, nfft: Int? = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, ceplifter: Int = 22, appendEnergy: Boolean = true, winFunc: FloatArray? = null): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.mfcc","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/mfcc.html","searchKeys":["mfcc","fun mfcc(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, numCep: Int = 13, nFilt: Int = 26, nfft: Int? = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, ceplifter: Int = 22, appendEnergy: Boolean = true, winFunc: FloatArray? = null): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SpeechFeatures.mfcc"]},{"name":"fun normalize(sig: IntArray): FloatArray","description":"org.merlyn.kotlinspeechfeatures.MathUtils.Companion.normalize","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-math-utils/-companion/normalize.html","searchKeys":["normalize","fun normalize(sig: IntArray): FloatArray","org.merlyn.kotlinspeechfeatures.MathUtils.Companion.normalize"]},{"name":"fun phase(): Double","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.phase","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/phase.html","searchKeys":["phase","fun phase(): Double","org.merlyn.kotlinspeechfeatures.fft.Complex.phase"]},{"name":"fun plus(a: Complex, b: Complex): Complex?","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.plus","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/plus.html","searchKeys":["plus","fun plus(a: Complex, b: Complex): Complex?","org.merlyn.kotlinspeechfeatures.fft.Complex.plus"]},{"name":"fun powspec(frames: Array<FloatArray>, nfft: Int): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SignalProc.powspec","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/powspec.html","searchKeys":["powspec","fun powspec(frames: Array<FloatArray>, nfft: Int): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SignalProc.powspec"]},{"name":"fun preemphasis(signal: FloatArray, coeff: Float = 0.95f): FloatArray","description":"org.merlyn.kotlinspeechfeatures.SignalProc.preemphasis","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-signal-proc/preemphasis.html","searchKeys":["preemphasis","fun preemphasis(signal: FloatArray, coeff: Float = 0.95f): FloatArray","org.merlyn.kotlinspeechfeatures.SignalProc.preemphasis"]},{"name":"fun re(): Double","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.re","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/re.html","searchKeys":["re","fun re(): Double","org.merlyn.kotlinspeechfeatures.fft.Complex.re"]},{"name":"fun reciprocal(): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.reciprocal","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/reciprocal.html","searchKeys":["reciprocal","fun reciprocal(): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.reciprocal"]},{"name":"fun scale(alpha: Double): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.scale","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/scale.html","searchKeys":["scale","fun scale(alpha: Double): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.scale"]},{"name":"fun sin(): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.sin","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/sin.html","searchKeys":["sin","fun sin(): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.sin"]},{"name":"fun ssc(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, nFilt: Int = 26, nfft: Int = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, winFunc: FloatArray? = null): Array<FloatArray>","description":"org.merlyn.kotlinspeechfeatures.SpeechFeatures.ssc","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-speech-features/ssc.html","searchKeys":["ssc","fun ssc(signal: FloatArray, sampleRate: Int = 16000, winLen: Float = 0.025f, winStep: Float = 0.01f, nFilt: Int = 26, nfft: Int = 512, lowFreq: Int = 0, highFreq: Int? = null, preemph: Float = 0.97f, winFunc: FloatArray? = null): Array<FloatArray>","org.merlyn.kotlinspeechfeatures.SpeechFeatures.ssc"]},{"name":"fun tan(): Complex?","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.tan","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/tan.html","searchKeys":["tan","fun tan(): Complex?","org.merlyn.kotlinspeechfeatures.fft.Complex.tan"]},{"name":"interface FFT","description":"org.merlyn.kotlinspeechfeatures.fft.FFT","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-f-f-t/index.html","searchKeys":["FFT","interface FFT","org.merlyn.kotlinspeechfeatures.fft.FFT"]},{"name":"object Companion","description":"org.merlyn.kotlinspeechfeatures.MathUtils.Companion","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures/-math-utils/-companion/index.html","searchKeys":["Companion","object Companion","org.merlyn.kotlinspeechfeatures.MathUtils.Companion"]},{"name":"open operator override fun equals(x: Any?): Boolean","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.equals","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/equals.html","searchKeys":["equals","open operator override fun equals(x: Any?): Boolean","org.merlyn.kotlinspeechfeatures.fft.Complex.equals"]},{"name":"open override fun hashCode(): Int","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.hashCode","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.merlyn.kotlinspeechfeatures.fft.Complex.hashCode"]},{"name":"open override fun rfft(signal: FloatArray, nfft: Int): Array<Complex>","description":"org.merlyn.kotlinspeechfeatures.fft.KotlinFFT.rfft","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-kotlin-f-f-t/rfft.html","searchKeys":["rfft","open override fun rfft(signal: FloatArray, nfft: Int): Array<Complex>","org.merlyn.kotlinspeechfeatures.fft.KotlinFFT.rfft"]},{"name":"open override fun rfft(signal: FloatArray, nfft: Int): Array<Complex>","description":"org.merlyn.kotlinspeechfeatures.fft.NoiseFFT.rfft","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-noise-f-f-t/rfft.html","searchKeys":["rfft","open override fun rfft(signal: FloatArray, nfft: Int): Array<Complex>","org.merlyn.kotlinspeechfeatures.fft.NoiseFFT.rfft"]},{"name":"open override fun toString(): String","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.toString","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/to-string.html","searchKeys":["toString","open override fun toString(): String","org.merlyn.kotlinspeechfeatures.fft.Complex.toString"]},{"name":"operator fun minus(b: Complex): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.minus","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/minus.html","searchKeys":["minus","operator fun minus(b: Complex): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.minus"]},{"name":"operator fun plus(b: Complex): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.plus","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/plus.html","searchKeys":["plus","operator fun plus(b: Complex): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.plus"]},{"name":"operator fun times(b: Complex): Complex","description":"org.merlyn.kotlinspeechfeatures.fft.Complex.times","location":"-kotlin -speech -features/org.merlyn.kotlinspeechfeatures.fft/-complex/times.html","searchKeys":["times","operator fun times(b: Complex): Complex","org.merlyn.kotlinspeechfeatures.fft.Complex.times"]}]
